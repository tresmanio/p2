class Game:
    def __init__(self):
        self.flop = []
        self.pot = 0
        self.flop_phase = 0  # Tracks the flop phase (0: pre-flop, 1: flop, 2: turn, 3: river)

    def add(self, bet_amount):
        self.pot += bet_amount

    def deal_flop(self, num):
        deck = Deck()
        for i in range(num):
            card = deck.deck.pop(random.randint(0, len(deck.deck) - 1))
            self.flop.append(card)

    def advance_phase(self):
        if self.flop_phase == 0:
            # Deal the initial flop (3 cards)
            self.deal_flop(3)
        elif self.flop_phase == 1:
            # Deal the turn (1 card)
            self.deal_flop(1)
        elif self.flop_phase == 2:
            # Deal the river (1 card)
            self.deal_flop(1)
        self.flop_phase += 1


class Screen():
    def __init__(self, game):
        self.game = game
        self.font = pygame.font.Font(None, 74)
        self.flop_cards = []

    def update_flop(self):
        self.flop_cards = []
        for i, card in enumerate(self.game.flop):
            suit = card[0].lower()
            suit_names = {"c": "club", "d": "diamond", "h": "hearts", "s": "spades"}
            suit = suit_names.get(suit, "unknown")
            cardIMG = pygame.image.load(f'CARDS/{suit}/{card}.png').convert_alpha()
            cardIMG = pygame.transform.scale(cardIMG, (100, 150))
            self.flop_cards.append(Image(400 + 120 * i, 250, cardIMG))


# Main game loop
current_screen = "main_menu"
game_running = True
player_turn = True
betting = False  # Track if the player is currently betting

while game_running:
    time_delta = clock.tick(60) / 1000.0
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            game_running = False
            pygame.quit()
            sys.exit()

        manager.process_events(event)

        if event.type == pygame_gui.UI_TEXT_ENTRY_FINISHED and event.ui_object_id == '#bet_input':
            try:
                bet_amount = int(event.text)
                if 0 < bet_amount <= player1.chips:
                    player1.bet(bet_amount)
                    game.add(bet_amount)
                    betting = False
                    bet_input.hide()
                    player_turn = False  # Switch to AI's turn
            except ValueError:
                print("Invalid input: Please enter a valid number.")

    manager.update(time_delta)

    if current_screen == "main_menu":
        screens.main_menu()
        if sb.is_clicked():
            current_screen = "game"
        elif ob.is_clicked():
            current_screen = "options"
        elif stb.is_clicked():
            current_screen = "stats"

    elif current_screen == "game":
        screens.game_screen()

        if player_turn:
            if bet.is_clicked():
                betting = True
                bet_input.show()
            elif fold.is_clicked():
                player1.fold()
                player_turn = False
        else:
            ai_decision = ai_player.make_decision(game)
            if ai_decision == "bet":
                player_turn = True
            elif ai_decision == "check":
                player_turn = True
            elif ai_decision == "fold":
                player_turn = True

        # Check if both players have made their moves
        if not player_turn and not betting:
            game.advance_phase()  # Advance to the next flop phase
            screens.update_flop()  # Update the flop display
            player_turn = True  # Reset for the next round

    elif current_screen == "options":
        screens.options_screen()

    elif current_screen == "stats":
        screens.stats_screen()

    manager.draw_ui(screen)
    pygame.display.flip()
